{"version":3,"file":"traversable-menu.js","mappings":"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","sources":["webpack://traversable-menu-2/webpack/universalModuleDefinition","webpack://traversable-menu-2/./node_modules/ts-deepmerge/dist/index.js","webpack://traversable-menu-2/webpack/bootstrap","webpack://traversable-menu-2/webpack/runtime/compat get default export","webpack://traversable-menu-2/webpack/runtime/define property getters","webpack://traversable-menu-2/webpack/runtime/hasOwnProperty shorthand","webpack://traversable-menu-2/webpack/runtime/make namespace object","webpack://traversable-menu-2/./src/js/constants/constants.ts","webpack://traversable-menu-2/./src/js/utils/ComponentIdentifier.ts","webpack://traversable-menu-2/./src/js/components/Panel.ts","webpack://traversable-menu-2/./src/js/components/MenuItem.ts","webpack://traversable-menu-2/./src/js/components/MenuItemLink.ts","webpack://traversable-menu-2/./src/js/utils/tokenizer.ts","webpack://traversable-menu-2/./src/js/components/Trigger.ts","webpack://traversable-menu-2/./src/js/components/PanelsContainer.ts","webpack://traversable-menu-2/./src/js/init/default_options.ts","webpack://traversable-menu-2/./src/js/state/InstanceState.ts","webpack://traversable-menu-2/./src/js/renderer/Renderer_Trigger.ts","webpack://traversable-menu-2/./src/js/state/ActiveTrail.ts","webpack://traversable-menu-2/./src/js/renderer/Renderer_MenuItemLink.ts","webpack://traversable-menu-2/./src/js/renderer/Renderer_MenuItem.ts","webpack://traversable-menu-2/./src/js/renderer/Renderer_ActiveTrail.ts","webpack://traversable-menu-2/./src/js/renderer/Renderer_PanelTitle.ts","webpack://traversable-menu-2/./src/js/renderer/Renderer_Panel.ts","webpack://traversable-menu-2/./src/js/utils/nearest_ancestor.ts","webpack://traversable-menu-2/./src/js/renderer/Renderer_PanelsContainer.ts","webpack://traversable-menu-2/./src/js/renderer/Renderer.ts","webpack://traversable-menu-2/./src/js/event_handlers/EventHandlers_Global.ts","webpack://traversable-menu-2/./src/js/event_handlers/EventHandlers_Trigger.ts","webpack://traversable-menu-2/./src/js/event_handlers/EventHandlers_MenuItem.ts","webpack://traversable-menu-2/./src/js/event_handlers/EventHandlers_Panel.ts","webpack://traversable-menu-2/./src/js/event_handlers/EventHandlers.PanelsContainer.ts","webpack://traversable-menu-2/./src/js/event_handlers/EventHandlers.ts","webpack://traversable-menu-2/./src/js/parser/Parser_MenuItemLink.ts","webpack://traversable-menu-2/./src/js/parser/Parser_Trigger.ts","webpack://traversable-menu-2/./src/js/parser/Parser_MenuItem.ts","webpack://traversable-menu-2/./src/js/parser/Parser_Panel.ts","webpack://traversable-menu-2/./src/js/parser/Parser_PanelsContainer.ts","webpack://traversable-menu-2/./src/js/parser/Parser.ts","webpack://traversable-menu-2/./src/js/core/traversable-core.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(self, () => {\nreturn ","\"use strict\";\r\nvar __assign = (this && this.__assign) || function () {\r\n    __assign = Object.assign || function(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\r\n                t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n    return __assign.apply(this, arguments);\r\n};\r\nvar __read = (this && this.__read) || function (o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n};\r\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || Array.prototype.slice.call(from));\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n// istanbul ignore next\r\nvar isObject = function (obj) {\r\n    if (typeof obj === \"object\" && obj !== null) {\r\n        if (typeof Object.getPrototypeOf === \"function\") {\r\n            var prototype = Object.getPrototypeOf(obj);\r\n            return prototype === Object.prototype || prototype === null;\r\n        }\r\n        return Object.prototype.toString.call(obj) === \"[object Object]\";\r\n    }\r\n    return false;\r\n};\r\nvar merge = function () {\r\n    var objects = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        objects[_i] = arguments[_i];\r\n    }\r\n    return objects.reduce(function (result, current) {\r\n        if (Array.isArray(current)) {\r\n            throw new TypeError(\"Arguments provided to ts-deepmerge must be objects, not arrays.\");\r\n        }\r\n        Object.keys(current).forEach(function (key) {\r\n            if ([\"__proto__\", \"constructor\", \"prototype\"].includes(key)) {\r\n                return;\r\n            }\r\n            if (Array.isArray(result[key]) && Array.isArray(current[key])) {\r\n                result[key] = merge.options.mergeArrays\r\n                    ? Array.from(new Set(result[key].concat(current[key])))\r\n                    : current[key];\r\n            }\r\n            else if (isObject(result[key]) && isObject(current[key])) {\r\n                result[key] = merge(result[key], current[key]);\r\n            }\r\n            else {\r\n                result[key] = current[key];\r\n            }\r\n        });\r\n        return result;\r\n    }, {});\r\n};\r\nvar defaultOptions = {\r\n    mergeArrays: true,\r\n};\r\nmerge.options = defaultOptions;\r\nmerge.withOptions = function (options) {\r\n    var objects = [];\r\n    for (var _i = 1; _i < arguments.length; _i++) {\r\n        objects[_i - 1] = arguments[_i];\r\n    }\r\n    merge.options = __assign({ mergeArrays: true }, options);\r\n    var result = merge.apply(void 0, __spreadArray([], __read(objects), false));\r\n    merge.options = defaultOptions;\r\n    return result;\r\n};\r\nexports.default = merge;\r\n//# sourceMappingURL=index.js.map","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/* We use our own ID attribute to avoid any collisions with the actual id attribute */\nexport const DATA_ATTR_ELEMENT_ID = 'data-traversable-id'\n\n/* Identifies the target panel for a given trigger */\nexport const DATA_ATTR_TRIGGER_TARGET = 'data-trigger-target'\n\n/* Identifies the trigger that opens a panel */\nexport const DATA_ATTR_TRIGGER_SOURCE = 'data-trigger-source'\n\n/* Stores the panel height */\nexport const DATA_ATTR_PANEL_HEIGHT = 'data-panel-height'\n\n/* Stores the parent id, e.g. for a panel */\nexport const DATA_ATTR_ELEMENT_PARENT_ID = 'data-parent-id'\n\n/* A token that gets replaced with the actual name of the parent panel title */\nexport const TOKEN_PARENT_TITLE = \"previous-title\"\n\nexport const DATA_ATTR_PANEL_ID = 'data-panel-id'\n\n/* A token that gets replaced with the name of the panel title */\nexport const TOKEN_MENU_TITLE = \"menu-title\"\n\nexport const DATA_ATTR_PANEL_DEPTH = 'data-panel-depth'","import InstanceState from \"../state/InstanceState\"\nimport { DATA_ATTR_ELEMENT_ID } from \"../constants/constants\"\nexport default class ComponentIdentifier {\n\n  state: InstanceState\n\n  constructor(state : InstanceState) {\n    this.state = state\n  }\n  \n  public static elementIDGet(element: Element): string | null {\n\n    if ( element && typeof(element.getAttribute) != 'undefined') {\n      return element.getAttribute(DATA_ATTR_ELEMENT_ID)\n    }\n\n    return null\n  }\n\n  public static elementApply(element: Element, id?: string) {\n\n    id ||= ComponentIdentifier.newID()\n\n    element.setAttribute(DATA_ATTR_ELEMENT_ID, id )\n\n  }\n\n  public static newID(): string {\n    return 'i_' + ComponentIdentifier.generateUniqueSerial()\n  }\n\n  public static generateUniqueSerial(): string {  \n    return 'xxxx-xxxx-xxx'.replace(/[x]/g, () => {  \n      const r = Math.floor(Math.random() * 12)\n      return r.toString(12)\n    })\n  }\n\n}","import PanelsContainer from './PanelsContainer'\nimport InstanceState from \"../state/InstanceState\"\nimport { Trigger } from './Trigger'\nimport ComponentIdentifier from '../utils/ComponentIdentifier'\nimport MenuItem from './MenuItem'\n\n/** \n * Class representing a single \"panel\" of the menu \n */\nexport default class Panel {\n    \n  private _id!: string\n  private _depth = 0\n  private _parent: Panel\n\n  element!: Element\n  container!: PanelsContainer\n  state! : InstanceState\n  \n  trigger_parent: Trigger\n  trigger_top: Trigger\n  menu_item_parent: MenuItem\n  menu_items: Array<MenuItem>\n  title: string\n\n  /**\n   * Instantiate a Panel object\n   * @param {PanelsContainer} The panels container that holds this panel \n   * @param {InstanceState} state The state object for this instance of the library \n   */\n  constructor(container : PanelsContainer, state : InstanceState) {\n    this.container = container\n    this.state = state\n    this.menu_items = []\n    this._id = ComponentIdentifier.newID()\n  }\n\n  public get id(): string {\n    return this._id\n  }\n  \n  addMenuItem(item: MenuItem ) {\n    this.menu_items.push(item)\n  }\n\n  public set depth(depth: number) {\n    this._depth = depth\n  }\n\n  public get depth(): number {\n    return this._depth\n  }\n\n  public set parent(parent: Panel) {\n    this._parent = parent\n  }\n\n  public get parent(): Panel {\n    return this._parent\n  }\n\n}\n\n","import InstanceState from \"../state/InstanceState\"\nimport ComponentIdentifier from \"../utils/ComponentIdentifier\"\nimport Panel from \"./Panel\"\nimport MenuItemLink from \"./MenuItemLink\"\nimport { Trigger } from \"./Trigger\"\n\n/** \n * Class representing a menu item within the menu\n * menu items contain a menu item link.\n */\nexport default class MenuItem {\n\n  private _panel: Panel\n\n  state: InstanceState\n  element: HTMLElement\n  id: string\n  sub_panel: Panel\n  trigger_child: Trigger\n  link: MenuItemLink\n\n  constructor(state: InstanceState) {\n    this.state = state\n    this.id = ComponentIdentifier.newID()\n  }\n\n  public set panel(panel: Panel) {\n    this._panel = panel\n  }\n\n  public get panel(): Panel {\n    return this._panel\n  }\n  \n}","import InstanceState from \"../state/InstanceState\"\nimport ComponentIdentifier from \"../utils/ComponentIdentifier\"\nimport MenuItem from \"./MenuItem\"\n\nexport default class MenuItemLink {\n\n  id: string\n  state: InstanceState\n  menu_item: MenuItem\n  text: string\n  link: string\n  element: HTMLElement\n\n  constructor(state: InstanceState) {\n    this.state = state\n    this.id = ComponentIdentifier.newID()\n  }\n\n}","export default class Tokenizer {\n\n  public static replace( given_string:string, token:string, val:string ) {\n    return given_string.replace( '[:' + token.toString() + ':]', val)\n  }\n\n}","import InstanceState from \"../state/InstanceState\"\nimport TriggerType from \"../types/TriggerType\"\nimport Panel from \"./Panel\"\nimport MenuItem from './MenuItem'\nimport ComponentIdentifier from \"../utils/ComponentIdentifier\"\nimport { TOKEN_PARENT_TITLE } from \"../constants/constants\"\nimport Tokenizer from \"../utils/tokenizer\"\n\ninterface TriggerInterface {\n  get text():string\n  get classname(): string\n}\n\nexport class Trigger implements TriggerInterface{\n\n  private _id : string\n  private _activates_panel: Panel\n\n  panel: Panel\n  state: InstanceState\n  element: Element\n  index: number\n  type: TriggerType\n  \n  menu_item : MenuItem\n\n  constructor(state : InstanceState) {\n    this.state = state\n    this._id = ComponentIdentifier.newID()\n  }\n\n  public set activates_panel( panel : Panel ) {\n    this._activates_panel = panel\n  }  \n\n  public get activates_panel() : Panel {\n    return this._activates_panel\n  }\n\n  public get id() {\n    return this._id\n  }\n\n  public get text() {\n    return \"\"\n  }\n\n  public get classname() {\n    return \"\"\n  }\n\n}\n\nexport class Trigger_Child extends Trigger {\n\n  constructor(state : InstanceState) {\n    super(state)\n  }\n  \n  public get text(): string {\n    return this.state.options.triggers.child_text\n  }\n\n  public get classname(): string {\n    return this.state.options.classes.panel_trigger_child\n  }\n\n}\n\nexport class Trigger_Parent extends Trigger {\n\n  constructor(state: InstanceState) {\n    super(state)\n  }\n\n  public get text(): string {\n    \n    let text = \"\"\n\n    if (this.panel \n      && this.panel.depth < this.state.options.triggers.top_depth\n      && this.state.options.triggers.top_remove_auto) {\n      \n      /* The parent uses the \"top\" trigger text if we're beneath top_depth and top_remove_auto is true */\n      text = this.state.options.triggers.top_text\n    }\n    else {\n      /* Pull the title from 2 menu items above because that gives us the title of the parent panel */\n      if ( this.menu_item && this.menu_item.panel ) {\n        const menu_item_parent = this.menu_item.panel.menu_item_parent\n        if (menu_item_parent) {\n          const menu_item_link = menu_item_parent.link\n          text = Tokenizer.replace(this.state.options.triggers.parent_text, TOKEN_PARENT_TITLE, menu_item_link.text)\n        }\n      }\n    }\n\n    return text\n  }\n\n  public get classname(): string {\n    return this.state.options.classes.panel_trigger_parent\n  }\n\n}\n\nexport class Trigger_Top extends Trigger {\n\n  constructor(state: InstanceState) {\n    super(state)\n  }\n\n  public get text(): string {\n    return this.state.options.triggers.top_text\n  }\n\n  public get classname(): string {\n    return this.state.options.classes.panel_trigger_top\n  }\n\n}\n\n","import Panel from \"./Panel\"\nimport InstanceState from '../state/InstanceState'\nimport MenuItem from './MenuItem'\nimport MenuItemLink from './MenuItemLink'\nimport { Trigger, Trigger_Child, Trigger_Parent } from './Trigger'\nimport { MenuItemData, PanelContainerData } from '../types/ItemData'\nimport ComponentIdentifier from \"../utils/ComponentIdentifier\"\n\n/** \n * Class representing a container with multiple menu panels within it.\n * This is the topmost object in the tree for any given instance of the menu hierarchy. \n */\nexport default class PanelsContainer {\n\n  public _id : string\n\n  element: HTMLElement\n  state: InstanceState\n  panels: Array<Panel>\n  triggers: { [key:string] : Trigger }\n  item_data: PanelContainerData\n\n  constructor(state : InstanceState ) {\n    this.state = state\n    this.panels = []\n    this._id = ComponentIdentifier.newID()\n  }\n\n  public get id(): string {\n    return this._id\n  }\n\n  validateItemData(item_data: PanelContainerData) {\n    return (item_data && typeof(item_data.items) != 'undefined') ? true : false\n  }\n\n  /**\n   * Create the panels structure (objects and state) \n   * from a javascript/JSON object that takes the form:\n   * {'items': \n   *    [\n          {\n            'text': 'About',\n            'link': 'http://www.example.com/about',\n            'items': [\n                {\n                'text': 'Our team',\n                'link': 'http://www.example.com/our-team',\n                },\n                {\n                'text': 'Our mission',\n                'link': 'http://www.example.com/our-mission',\n                'items': [\n                  {\n                  'text': 'Tertiary 1',\n                  'link': 'http://www.example.com/tertiary-1',\n                  }\n            ]\n          },\n        ]\n      },\n   * @param {PanelContainerData} item_data \n   */\n  initializeFromData(item_data: PanelContainerData): void {\n\n    if (!this.validateItemData(item_data)) {\n      throw \"Invalid item data. Could not find items key\"\n    }\n    else {\n      this.item_data = item_data\n      this.panels = []\n      const panel : Panel = new Panel(this, this.state)\n\n      if ( this.item_data && typeof(this.item_data.items) != 'undefined' ) {\n        this.panelInitializeFromData(panel, this.item_data.items)\n      }\n    }\n\n  }\n\n  panelInitializeFromData(panel: Panel, item_data : Array<MenuItemData>, depth = 0) {\n\n    panel.depth = depth\n    this.addPanel(panel)\n\n    item_data.forEach(\n      item => {\n        const menu_item = this.menuItemInitializeFromData(panel, item)\n    \n        if ( depth > 0 ) {\n          //\n          // Add a trigger for the parent panel if we're in a sub panel\n          //\n          const trigger_parent = new Trigger_Parent(this.state)\n          trigger_parent.panel = panel\n          trigger_parent.activates_panel = panel.parent\n          trigger_parent.menu_item = panel.menu_item_parent\n          panel.trigger_parent = trigger_parent\n        }\n        \n        if ( typeof(item.items) != 'undefined') {\n          const sub_panel = new Panel(this, this.state)\n          const trigger_child = new Trigger_Child(this.state)\n\n          trigger_child.activates_panel = sub_panel\n          trigger_child.panel = panel\n\n          sub_panel.parent = panel\n          sub_panel.menu_item_parent = menu_item\n          menu_item.sub_panel = sub_panel\n          menu_item.trigger_child = trigger_child\n\n          depth++\n          this.panelInitializeFromData(sub_panel, item.items, depth)\n          depth--\n        }\n      }\n\n    )\n\n  }\n\n  menuItemInitializeFromData(panel: Panel, item: MenuItemData) {\n    \n    const menu_item = new MenuItem(this.state)\n    menu_item.panel = panel\n    panel.addMenuItem(menu_item)\n\n    if ( typeof(item.link) != 'undefined' ) {\n      const menu_item_link = new MenuItemLink(this.state)\n      menu_item.link = menu_item_link\n      menu_item_link.menu_item = menu_item\n      menu_item_link.text = item.text\n      menu_item_link.link = item.link\n    }\n\n    return menu_item\n  }\n\n  addPanel(panel : Panel) {\n    this.panels.push(panel)\n  }\n\n  panelsReset() : void {\n    this.panels = []\n  }\n\n}","import { Options } from \"../types/Options\"\n\nconst default_options:Options = {\n\n  core: {\n    debug: false\n  },\n\n  init: {\n    auto_traverse_to_active: true\n  },\n\n  active: {\n    'find_by_url': true,\n    'find_by_class': true,\n    'urls': null,\n    'selectors': null,\n    'selectors_additional': [],\n    'parents_search_max': 10 //max attempts to find parent menu item element when finding active link.\n                             //Should be high enough to go from a panel title to its parent menu item above\n  },\n\n  selectors: {\n    'panel': '.menu__panel', //an individual menu panel - usually one level of the menu, shown expanded\n    'panel_trigger_child': '.menu__panel__trigger--child', //trigger element that goes one level deeper,\n    'panel_trigger_parent': '.menu__panel__trigger--parent',\n    'panel_trigger_top': '.menu__panel__trigger--top',\n    'panel_title': '.menu__panel__title', //title for a panel\n    'panels_container': '.traversable-menu', //container that holds multiple panels\n    'menu_item_active': '.menu__item--active', //currently active link (deepest)\n    'menu_item_active_trail': '.menu__item--active-trail', //part of the active menu trail\n    'menu_item': '.menu__item',\n    'menu_item_link': '.menu__item__link',\n    'menu_item_link_active': '.menu__item__link--active',\n    'tabbable_elements': 'a', //Tabbing to these is disabled when menu panel is closed\n  },\n\n  triggers: {\n    'parent_text': 'Up to [:previous-title:]',\n    'child_text': 'Explore &gt;',\n    'top_text': 'Up to Main Menu',\n    'top_depth': 2, //the depth at which to start showing 'up to main menu' link\n    'top_remove_auto': true, //whether to automatically remove 'up to main menu' link if the depth < triggers.top_depth\n    'top_text_use_top_panel_title_at_first_level': false, //if panel_title_first is set, use that as our \"top_text\" at the first level below the topmost panel,\n    'top_trigger_enabled': true,\n    'parent_text_use_top_at_first_level': true, //whether to default to \"top text\" instead of \"parent text\" at depth == 0\n    'events': [ 'keyup', 'mouseup' ]\n  },\n\n  accessibility: {\n    'container_role': 'menubar',\n    'panel_role': 'menu',\n    'menu_item_role': 'menuitem',\n    'menu_item_link_focus_first': true //set focus to first menu item link when panel is shown using keyboard\n  },\n\n  panel: {\n    'auto_scroll_to_top': true,\n    'height_auto': true,\n    'zindex_auto': true,\n    'zindex_start': 10,\n    'container_height_auto': true, //whether to automatically set the panel container height\n    'slide_animation_duration': 350, //in ms\n    'title_first': '', //the title of the first panel\n    'title_text': '[:menu-title:]', //title of subsequent panels. [:menu-title:] will be replaced by the text of the link that expands to show the menu\n    'title_link_enabled': true,\n    'title_enabled': true,\n    'title_element': 'h2'\n  },\n\n  panels_container: {\n    height_auto: true\n  },\n\n  classes: {\n    'panel': null,\n    'panels_container': null,\n    'panel_trigger_child': null,\n    'panel_trigger_parent': null,\n    'panel_trigger_top': null,\n    'menu_item': null,\n    'panels_initialized': 'traversable-menu--initialized',\n    'panel_active': 'menu__panel--active',\n    'panel_active_trail': 'menu__panel--active-trail',\n    'panel_active_parent': 'menu__panel--active-parent',\n    'panel_child_open': 'menu__panel--child-open',\n    'panel_show_immediate': '-show-immediate',\n    'panel_depth': 'menu__panel--depth-[:n:]',\n    'panel_height_auto_applied': '-panel-height-auto',\n    'panels_container_height_auto_applied': '-panels-container-height-auto',\n    'panel_title_link': 'menu__panel__title__link',\n    'menu_item_link': 'menu__item__link',\n    'menu_item_link_active': 'menu__item__link--active',\n  },\n\n  'render': {\n    'panels_container': null,\n    'depth_max': null,\n    'depth_max_relative': null\n  },\n\n  'errors': {\n    'silent_if_no_container': true\n  },\n  callbacks: {\n    trigger: {\n      before: null,\n      on: null,\n      after: null\n    },\n    panel: {\n      activate: {\n        before: null,\n        after: null\n      },\n      initialize: {\n        before: null,\n        after: null\n      },\n      'assimilate': {\n        'before': null,\n        'after': null\n      }\n    },\n    panels: {\n      initialize: {\n        before: null,\n        after: null\n      }\n    }\n  }\n}\n\nconst classNameFromSelector = function( selector : string ) {\n\n  const split = selector.split('.')\n  const final = split[split.length-1]\n\n  return selector.toString().replace(/^\\./, '')\n}\n  \nlet selector : string\n\nfor ( selector in default_options['selectors'] ) {\n  if ( typeof(default_options['classes'][selector]) != 'undefined' && default_options['classes'][selector] == null ) {\n    default_options['classes'][selector] = classNameFromSelector(default_options['selectors'][selector])\n  }\n}\n\nexport { default_options }","import { TraversableMenu } from '../core/traversable-core'\nimport { Options } from '../types/Options'\nimport { default_options } from '../init/default_options'\nimport PanelsContainer from '../components/PanelsContainer'\n\nexport default class InstanceState {\n\n  public static Instance_count = 0\n\n  panels_container: PanelsContainer\n  panels_container_selector: string\n  instance : TraversableMenu\n  options : Options\n  depth_max_canonical: number | null = null\n\n  constructor(instance: TraversableMenu) {\n    this.instance = instance\n    this.options = default_options\n  }\n  \n}","import { Trigger, Trigger_Top } from \"../components/Trigger\"\nimport InstanceState from \"../state/InstanceState\"\nimport { DATA_ATTR_ELEMENT_ID, DATA_ATTR_TRIGGER_TARGET } from '../constants/constants'\n\nexport default class Renderer_Trigger {\n\n  public static render(trigger: Trigger, state: InstanceState) {\n\n    const trigger_element = document.createElement('a')\n    \n    Renderer_Trigger.applyAttributes(trigger, trigger_element, state)\n\n    return trigger_element\n  }\n\n  public static applyAttributes(trigger: Trigger, trigger_element: HTMLElement, state: InstanceState): HTMLElement {\n\n    let panel_id = \"\"\n    \n    if ( trigger.activates_panel ) {\n      panel_id = trigger.activates_panel.id\n    }    \n\n    trigger_element.setAttribute(DATA_ATTR_ELEMENT_ID, trigger.id)\n    trigger_element.setAttribute(DATA_ATTR_TRIGGER_TARGET, panel_id) \n    trigger_element.setAttribute('href', '#')\n\n    trigger_element.setAttribute('aria-haspopup', \"true\")\n    trigger_element.setAttribute('aria-expanded', \"false\")\n    trigger_element.setAttribute('aria-controls', panel_id)   \n\n    trigger_element.innerHTML = trigger.text\n    trigger_element.classList.add(trigger.classname)\n\n    if (trigger instanceof Trigger_Top ) {\n      /* Hide the top trigger if the panel depth is below triggers.top_depth */\n      if (trigger.panel && trigger.panel.depth < state.options.triggers.top_depth) {\n        if (state.options.triggers.top_remove_auto) {\n          trigger_element.style.display = 'none'\n        }\n      }\n    }\n\n    return trigger_element\n  }\n\n  public static setActivated(element: HTMLElement, state: InstanceState) : void {\n    element.setAttribute('aria-expanded', \"true\")\n  }\n  \n}\n","import InstanceState from \"./InstanceState\"\n\nexport default class ActiveTrail {\n\n  state : InstanceState\n  \n  constructor( state : InstanceState ) {\n    this.state = state\n  }\n\n  /** \n   * Return all the selectors that we might want to use to identify the 'active' element,\n   * including checking for links that look at the current URL\n   * @param {InstanceState} state The state object for this instance of the library   \n  */\n  public static activeItemSelectors(state: InstanceState) : string[] {\n\n    let selectors: string[] = []\n\n    if (state.options.active.selectors == null) {\n\n      if (state.options.active.find_by_class) {\n        selectors.push( state.options.selectors.menu_item_active)\n        selectors.push( state.options.selectors.menu_item_link_active)\n      }\n\n      if (state.options.active.find_by_url) {\n        selectors = selectors.concat(selectors, ActiveTrail.activeURLSelectors(state))\n      }\n\n      if (state.options.active.selectors_additional) {\n\n        const link_selectors = state.options.active.selectors_additional\n\n        for ( let i = 0; i < link_selectors.length; i++ ) {\n          selectors.push( link_selectors[i] )\n        }\n      }\n    }\n    else {\n      selectors = state.options.active.selectors\n    }\n\n    return selectors\n\n  }\n\n  /**\n  * Determine the active URL, including any overridden active URL set in the options\n  * @param {InstanceState} state The state object for this instance of the library   \n  */\n  public static activeURLsGet(state: InstanceState) : string[] {\n    \n    let active_urls: string[] = []\n\n    //\n    // Check for explicitly set active urls\n    //\n    if ( state.options.active.urls !== null ) {\n\n      const active_urls_explicit = state.options.active.urls\n\n      if ( typeof(active_urls_explicit) == 'function' && typeof(active_urls_explicit.call) == 'function' ) {\n        active_urls = active_urls.concat( active_urls_explicit.call(this))\n      }\n      else {\n        active_urls = active_urls.concat(active_urls_explicit as Array<string>)\n      }\n    }\n    else {\n      active_urls = ActiveTrail.activeURLsDefault(state)\n    }\n\n    return active_urls\n  }\n\n  public static activeURLsDefault(state: InstanceState) : string[] {\n\n    let active_urls : string[] = []\n    let href_split = window.location.href.split('#')\n    let pathname_with_query_string = window.location.href\n\n    pathname_with_query_string = pathname_with_query_string.replace(/^[A-Za-z0-9]+:\\/\\//, '')\n    pathname_with_query_string = pathname_with_query_string.substr( pathname_with_query_string.indexOf('/') )\n\n    //\n    // Make sure these are in order of most to least favorable/specific;\n    // Matching is done on a first-match basis\n    //\n    active_urls = [\n      pathname_with_query_string,\n      window.location.pathname,\n      window.location.href\n    ]\n\n    //\n    // Additional possible permutations of URL\n    //\n    if ( href_split.length > 1 ) {\n      active_urls.push( href_split[0] ) //URL without fragment\n\n      href_split = href_split[0].split('?')\n      if ( href_split.length > 1 ) {\n        active_urls.push( href_split[0] ) //URL without fragment or query string\n      }\n    }\n\n    href_split = window.location.href.split('?')\n    if ( href_split.length > 1 ) {\n      active_urls.push( href_split[0] ) //URL without query string\n    }\n\n    return active_urls\n\n  }\n\n  public static activeURLSelectors(state: InstanceState) : string[] {\n\n    const valid_urls = ActiveTrail.activeURLsGet(state)\n    const selectors = []\n    \n    for ( let i = 0; i < valid_urls.length; i++ ) {\n      selectors.push( '[href=\"' + valid_urls[i] + '\"]' )\n    }\n\n    return selectors\n    \n  }\n\n  \n}","import MenuItemLink from \"../components/MenuItemLink\"\nimport { DATA_ATTR_ELEMENT_ID } from \"../constants/constants\"\nimport InstanceState from \"../state/InstanceState\"\n\nexport default class Renderer_MenuItemLink {\n\n  public static render(menu_item_link: MenuItemLink, state: InstanceState) {\n    \n    const menu_link_element = document.createElement('a')\n\n    menu_link_element.setAttribute('href', menu_item_link.link)\n    menu_link_element.innerHTML = menu_item_link.text    \n\n    menu_item_link.element = menu_link_element\n\n    Renderer_MenuItemLink.applyAttributes(menu_link_element, menu_item_link, state)\n\n    return menu_link_element\n  }\n\n  public static applyAttributes(menu_link_element: HTMLElement, menu_item_link: MenuItemLink, state: InstanceState) {\n    menu_link_element.classList.add(state.options.classes.menu_item_link)\n    menu_link_element.setAttribute(DATA_ATTR_ELEMENT_ID, menu_item_link.id)\n  }\n}","import MenuItem from \"../components/MenuItem\"\nimport InstanceState from \"../state/InstanceState\"\nimport { Renderer } from \"./Renderer\"\nimport Renderer_Trigger from \"./Renderer_Trigger\"\nimport Renderer_Panel from \"./Renderer_Panel\"\nimport ActiveTrail from \"../state/ActiveTrail\"\nimport Renderer_PanelsContainer from \"./Renderer_PanelsContainer\"\nimport Renderer_MenuItemLink from \"./Renderer_MenuItemLink\"\nimport { DATA_ATTR_ELEMENT_ID, DATA_ATTR_PANEL_ID } from \"../constants/constants\"\n\nexport default class Renderer_MenuItem {\n\n  public static applyAttributes(menu_item_element: HTMLElement, menu_item: MenuItem, state: InstanceState) {\n    menu_item_element.classList.add(state.options.classes.menu_item)\n    menu_item_element.setAttribute(DATA_ATTR_ELEMENT_ID, menu_item.id)\n    menu_item_element.setAttribute(DATA_ATTR_PANEL_ID, menu_item.panel.id)\n  }\n  \n  public static render(menu_item : MenuItem, state : InstanceState) {\n\n    const menu_item_element = document.createElement('li')\n\n    Renderer_MenuItem.applyAttributes(menu_item_element, menu_item, state)\n\n    if (menu_item.link) {\n      menu_item_element.appendChild(Renderer_MenuItemLink.render(menu_item.link, state))\n    }\n\n    if (menu_item.trigger_child) {\n      menu_item_element.appendChild(Renderer_Trigger.render(menu_item.trigger_child, state))\n    }\n\n    if (menu_item.sub_panel) {\n      menu_item_element.appendChild(Renderer_Panel.render(menu_item.sub_panel, state))\n    }\n\n    return menu_item_element\n  }\n\n  /**\n   * Tries to identify the currently active menu item, \n   * as determined by looking for elements matching the return value from activeItemSelectors\n   * @param {InstanceState} state The state object for this instance of the library   \n   * @returns The menu item element that matches the active selector, or null if none found\n   */  \n  public static activeMenuItemIdentify(state: InstanceState): HTMLElement | null {\n\n    const active_selectors = ActiveTrail.activeItemSelectors(state)\n\n    let matching_items: NodeList\n    let matching_node: Node \n    let matching_element: HTMLElement\n    let final_match: HTMLElement = null\n    let i: number\n\n    for(i = 0; i < active_selectors.length; i++) {\n\n      const panels_container_element = Renderer_PanelsContainer.getContainerElement(state)\n      \n      if ( panels_container_element ) {\n        matching_items = panels_container_element.querySelectorAll(active_selectors[i])\n\n        if ( matching_items.length > 0 ) {\n          matching_node = matching_items[matching_items.length - 1] //Take the deepest match if we found multiple\n          matching_element = matching_node as HTMLElement\n\n          if ( matching_element ) {\n\n            if ( !matching_element.matches(state.options.selectors.menu_item) ) {\n              //\n              // We want to find the menu item, not the link or something else\n              //\n              let parent_count = state.options.active.parents_search_max\n              let this_node = matching_element.parentElement\n\n              while ( parent_count > 0 ) {\n                if ( this_node.matches(state.options.selectors.menu_item) ) {\n                  final_match = this_node\n                  break\n                }\n                this_node = this_node.parentElement\n                parent_count--\n              }\n            }\n            else {\n              final_match = matching_element\n            }\n\n            if ( final_match ) {\n              break\n            }\n          }\n        }\n      }\n    }\n\n    return final_match\n    \n  }  \n\n  /**\n   * Tries to identify the panel that corresponds to the currently active menu item, \n   * as determined by activeMenuIdentify\n   * @param {InstanceState} state The state object for this instance of the library   \n   * @returns The panel element that holds the active menu item, or null if none found\n   */\n  public static panelElementByActiveMenuItem(state: InstanceState): HTMLElement | null {\n\n    const active_menu_item = Renderer_MenuItem.activeMenuItemIdentify(state)\n\n    if ( active_menu_item ) {\n      const panel_id = active_menu_item.getAttribute(DATA_ATTR_PANEL_ID) \n      const panel_element = Renderer.findElementByID(panel_id)\n\n      if ( panel_element ) {\n        return panel_element\n      }\n    }\n\n    return null\n  }\n}","import { Renderer } from \"./Renderer\"\nimport InstanceState from \"../state/InstanceState\"\nimport { DATA_ATTR_ELEMENT_PARENT_ID, DATA_ATTR_TRIGGER_SOURCE } from \"../constants/constants\"\nimport Renderer_PanelsContainer from \"./Renderer_PanelsContainer\"\n\nexport default class Renderer_ActiveTrail {\n\n  /**\n   * Place a panel within the active trail and set all relevant attributes\n   * @param {HTMLElement} panel_element \n   * @param {InstanceState} state \n   */\n  public static panelInclude(panel_element: HTMLElement, state: InstanceState): void {\n\n    panel_element.classList.add( state.options.classes.panel_active_trail )\n\n    const trigger_source_id = panel_element.getAttribute(DATA_ATTR_TRIGGER_SOURCE)\n\n    if ( trigger_source_id ) {\n      const trigger_for_panel = Renderer.findElementByID(trigger_source_id)\n\n      if ( trigger_for_panel ) {\n        trigger_for_panel.setAttribute(\"aria-expanded\", \"true\")\n      }\n    }\n\n    const panel_parent_id = panel_element.getAttribute(DATA_ATTR_ELEMENT_PARENT_ID)\n\n    if ( panel_parent_id ) {\n      const panel_parent_element = Renderer.findElementByID(panel_parent_id)\n\n      if ( panel_parent_element ) {\n        panel_parent_element.classList.add( state.options.classes.panel_child_open )\n        panel_parent_element.scrollTop = 0\n        Renderer_ActiveTrail.panelInclude(panel_parent_element, state)\n      }\n    }\n  }\n\n  /**\n   * Remove a panel from the active trail and set all relevant attributes\n   * @param {HTMLElement} panel_element \n   * @param {InstanceState} state \n   */  \n  public static panelExclude(panel_element: HTMLElement, state: InstanceState): void {\n\n    panel_element.classList.remove(state.options.classes.panel_active_trail)\n    panel_element.classList.remove(state.options.classes.panel_child_open)\n\n    const trigger_source_id = panel_element.getAttribute(DATA_ATTR_TRIGGER_SOURCE)\n\n    if ( trigger_source_id ) {\n      const trigger_for_panel = Renderer.findElementByID(trigger_source_id)\n\n      if ( trigger_for_panel ) {\n        trigger_for_panel.setAttribute(\"aria-expanded\", \"false\")\n      }\n    }\n  }\n\n  /**\n   * Get the currently active panel element\n   * @param {InstanceState} state The state object for this instance of the library   \n   * @returns The active panel element if found, null if none found\n   */ \n  public static panelGetActive(state: InstanceState): HTMLElement | null {\n    \n    const container = Renderer_PanelsContainer.getContainerElement(state)\n\n    if ( container ) {\n      return container.querySelector(`.${state.options.classes.panel_active}`)\n    }\n\n    return null\n  }\n\n  /**  \n   * Recalculate the active trail based on current state\n   * @param {InstanceState} state The state object for this instance of the library   \n  */\n  public static recalculate(state: InstanceState): void {\n\n    const active_panel = Renderer_ActiveTrail.panelGetActive(state)\n    const panels = Renderer_PanelsContainer.getPanels(state)\n\n    panels.forEach( \n      node => {\n        const element = node as HTMLElement \n        Renderer_ActiveTrail.panelExclude(element, state)\n      }\n    )\n\n    if (active_panel) {\n      Renderer_ActiveTrail.panelInclude(active_panel, state)\n    }    \n  }\n\n}","import Panel from \"../components/Panel\"\nimport InstanceState from \"../state/InstanceState\"\nimport Tokenizer from \"../utils/tokenizer\"\nimport { TOKEN_MENU_TITLE } from \"../constants/constants\"\n\nexport default class Renderer_PanelTitle {\n\n  public static render(panel: Panel, state: InstanceState): HTMLElement | null {\n    \n    if (Renderer_PanelTitle.shouldShow(panel, state)) {\n      const title_element = document.createElement(state.options.panel.title_element)\n      const link_element = Renderer_PanelTitle.renderLink(title_element, panel, state)\n      \n      if (link_element) {\n        Renderer_PanelTitle.applyText(link_element, panel, state)\n        title_element.appendChild(link_element)\n      }\n      else {\n        Renderer_PanelTitle.applyText(title_element, panel, state)\n      }\n\n      Renderer_PanelTitle.applyAttributes(title_element, state)\n    \n      return title_element\n    }\n\n    return null\n  }\n\n    /**\n     * Determines whether this panel should have a title\n     * \n     * @param {Panel} panel The panel to find a title for\n     * @param {InstanceState} state State object for this instance\n     * @return {boolean} true if the panel should show a title, false if not\n     */\n    public static shouldShow(panel: Panel, state: InstanceState): boolean {\n\n    if (panel.depth == 0 && state.options.panel.title_first != \"\" ) {\n      return true\n    }\n    else {\n      if (panel.menu_item_parent && panel.menu_item_parent.link && panel.menu_item_parent.link.text) {\n        return true\n      }\n    }\n    \n    return false\n    }\n\n  /**\n   * If a title element exists in the HTML for this panel, apply any necessary logic\n   * to update the title text at runtime (e.g. if an explicit title for the first panel is set in the options)\n   * \n   * @param panel The panel to find a title for\n   * @param state State object for this instance\n   */\n   public static applyText(panel_title_element: HTMLElement, panel: Panel, state: InstanceState): void {\n  \n    if (panel_title_element) {\n      if (panel.depth == 0 && panel_title_element.innerHTML == \"\" ) {\n        panel_title_element.innerHTML = state.options.panel.title_first\n      }\n      else {\n        if (panel.menu_item_parent && panel.menu_item_parent.link && panel.menu_item_parent.link.text)\n        panel_title_element.innerHTML = Tokenizer.replace(state.options.panel.title_text, TOKEN_MENU_TITLE, panel.menu_item_parent.link.text)\n      }\n    }\n   }\n  \n  public static renderLink(panel_title_element: HTMLElement, panel: Panel, state: InstanceState): HTMLElement | null {\n\n    let link_element\n\n    if (panel_title_element) {\n      if (panel.menu_item_parent && panel.menu_item_parent.link && panel.menu_item_parent.link.link) {\n        link_element = document.createElement('a')  \n        Renderer_PanelTitle.applyLinkAttributes(link_element, panel, state)\n      }\n    }  \n    \n    return link_element || null\n    \n  }\n\n  public static applyLinkAttributes(link_element: HTMLElement, panel: Panel, state: InstanceState): void {\n    \n    if (panel.menu_item_parent && panel.menu_item_parent.link && panel.menu_item_parent.link.link) {\n      link_element.setAttribute('href', panel.menu_item_parent.link.link)\n    }\n\n   }\n  \n  \n  public static applyAttributes(title_element: HTMLElement, state: InstanceState): void {\n    \n    title_element.classList.add(state.options.classes.panel_title_link)\n  \n  }\n\n}\n\n","import { Renderer } from \"./Renderer\"\nimport Renderer_MenuItem from \"./Renderer_MenuItem\"\nimport Renderer_PanelsContainer from \"./Renderer_PanelsContainer\"\nimport { DATA_ATTR_PANEL_HEIGHT, DATA_ATTR_ELEMENT_ID, DATA_ATTR_ELEMENT_PARENT_ID, DATA_ATTR_TRIGGER_SOURCE, TOKEN_MENU_TITLE, DATA_ATTR_PANEL_DEPTH } from \"../constants/constants\"\nimport Panel from \"../components/Panel\"\nimport InstanceState from \"../state/InstanceState\"\nimport Renderer_Trigger from \"./Renderer_Trigger\"\nimport Renderer_ActiveTrail from \"./Renderer_ActiveTrail\"\nimport { Trigger_Top } from \"../components/Trigger\"\nimport Renderer_PanelTitle from \"./Renderer_PanelTitle\"\nimport nearestAncestor from \"../utils/nearest_ancestor\"\n\ninterface Options_Panel_Activate {\n  show_immediate?: boolean,\n  focus_first_item?: boolean\n}\n\nexport default class Renderer_Panel {\n\n  /* Action timers are used to wait long enough for the slide animation to finish before taking action */\n  public static action_timers: {[panel_id:string]: ReturnType<typeof setTimeout>[] } = {}\n\n  /**  \n   * Applies default attributes to a panel element\n   * @param {HTMLElement} panel_element The element to act on\n   * @param {Panel} panel the panel object\n   * @param {InstanceState} state The state object for this instance of the library \n  */\n  public static applyAttributes(panel_element: HTMLElement, panel: Panel, state: InstanceState): void {\n    const depth_class = state.options.classes.panel_depth.replace('[:n:]', panel.depth.toString())\n\n    panel_element.setAttribute('id', panel.id)\n    panel_element.setAttribute(DATA_ATTR_ELEMENT_ID, panel.id)\n    panel_element.setAttribute(DATA_ATTR_PANEL_DEPTH, panel.depth.toString())\n    panel_element.classList.add(state.options.classes.panel)\n    panel_element.classList.add(depth_class)\n\n    if ( panel.parent ) {\n      panel_element.setAttribute(DATA_ATTR_ELEMENT_PARENT_ID, panel.parent.id)\n    }\n\n    if ( panel.menu_item_parent && panel.menu_item_parent.trigger_child) {\n      panel_element.setAttribute(DATA_ATTR_TRIGGER_SOURCE, panel.menu_item_parent.trigger_child.id)\n    }\n\n    if (state.options.panel.zindex_auto) {\n      panel_element.style.zIndex = (panel.depth + 1 + state.options.panel.zindex_start).toString()\n    }\n\n    if (state.options.panel.height_auto) {\n      panel_element.style.height = \"0px\"\n    }    \n  }\n\n  /** \n   * Renders a panel and any sub-panels container within it\n   * @param {HTMLElement} panel_element The panel object to render\n   * @param {InstanceState} state The state object for this instance of the library\n  */\n  public static render(panel: Panel, state: InstanceState): HTMLElement {\n\n    const panel_element = document.createElement('div')\n    const list_element = document.createElement('ul')\n    Renderer_Panel.applyAttributes(panel_element, panel, state)\n\n    if (panel.depth >= state.options.triggers.top_depth && state.options.triggers.top_trigger_enabled) {\n      const top_trigger_element = Renderer_Panel.renderTopTrigger(panel, state)\n      panel_element.appendChild(top_trigger_element)\n    }\n\n    if ( panel.trigger_parent ) {\n      const trigger_parent_element = Renderer_Trigger.render(panel.trigger_parent, state)\n      panel_element.appendChild(trigger_parent_element)\n    }\n\n    const panel_title_element = Renderer_PanelTitle.render(panel, state)\n    if (panel_title_element) {\n      panel_element.appendChild(panel_title_element)\n    }\n\n    panel.menu_items.forEach(\n      menu_item => {\n        list_element.appendChild(Renderer_MenuItem.render(menu_item, state))\n      }\n    )\n\n    panel_element.appendChild(list_element)\n    \n    return panel_element\n  } \n  \n  /**\n   * Renders a \"Back to top\" trigger on this panel\n   * @param {Panel} panel the panel the trigger will be applied to \n   * @param {InstanceState} state the state of the current instance\n   * @returns {HTMLElement} the rendered element\n   */\n  public static renderTopTrigger(panel: Panel, state: InstanceState): HTMLElement {\n\n    const trigger = new Trigger_Top(state)\n    trigger.element = document.createElement('a')\n    trigger.activates_panel = state.panels_container.panels[0]\n    panel.trigger_top = trigger\n\n    return Renderer_Trigger.render(trigger, state)\n\n  }\n\n  public static activatePanelByID(panel_id : string, state : InstanceState) {\n\n    Renderer_Panel.activate(Renderer.findElementByID(panel_id), state)\n    \n  }\n\n  /** \n   * Applies attributes necessary to make a panel \"active\" (i.e. the visible panel)\n   * @param {HTMLElement} panel_element The element to act on\n   * @param {InstanceState} state The state object for this instance of the library\n  */\n  public static activeAttributesApply(panel_element: HTMLElement, state: InstanceState): void {\n\n    panel_element.classList.add(state.options.classes.panel_active)\n    \n    //Renderer_Panel.removeVisibilityTimer(panel_element, state)\n\n    panel_element.style.visibility = 'visible'\n    panel_element.style.display = 'initial'\n    panel_element.setAttribute('aria-hidden', 'false')\n    panel_element.setAttribute('data-panel-active', \"true\")\n    panel_element.scrollTop = 0\n\n    Renderer_ActiveTrail.panelInclude(panel_element, state)\n    \n  }\n\n  /** \n   * Removes attributes necessary to make a panel \"active\" (i.e. the visible panel)\n   * @param {HTMLElement} panel_element The element to act on\n   * @param {InstanceState} state The state object for this instance of the library\n  */\n  public static activeAttributesRemove(panel_element : HTMLElement, state : InstanceState): void {\n\n    panel_element.classList.remove( state.options.classes.panel_active )\n\n    Renderer_Panel.applyActionTimer(\n      panel_element, \n      function(panel_element, state) {\n        panel_element.style.visibility = \"hidden\"\n      },\n      state\n    )\n\n    panel_element.setAttribute('aria-hidden', 'true')\n    panel_element.setAttribute('data-panel-active', \"false\")\n    panel_element.scrollTop = 0\n    \n  }\n\n  /** \n   * Removes a stored visibility timer on a timer element, which is used to wait until the panel has shifted out of \n   * view before hiding it\n   * @param {HTMLElement} panel_element The element to act on\n   * @param {InstanceState} state The state object for this instance of the library    \n   */\n  public static removeActionTimer(panel_element: HTMLElement, state: InstanceState): void {\n\n    const element_id = panel_element.getAttribute(DATA_ATTR_ELEMENT_ID)\n\n    if (typeof(Renderer_Panel.action_timers[element_id]) != 'undefined' && Array.isArray(Renderer_Panel.action_timers[element_id])) {\n      Renderer_Panel.action_timers[element_id].forEach(\n        (timer) => {\n          clearTimeout(timer)\n        }\n      )\n      \n      Renderer_Panel.action_timers[element_id] = []\n    }    \n  }\n\n  /**\n   * Adds a stored action timer, which is used to wait until the panel has shifted out of \n   * view before hiding it\n   * @param {HTMLElement} panel_element The element to act on\n   * @param {Function} the callback to run when this timer activates\n   * @param {InstanceState} state The state object for this instance of the library   \n   */  \n  public static applyActionTimer(panel_element: HTMLElement, callback: (panel_element: HTMLElement, state: InstanceState) => any, state: InstanceState): void {\n\n    const element_id = panel_element.getAttribute(DATA_ATTR_ELEMENT_ID)\n\n    if (typeof(Renderer_Panel.action_timers[element_id]) == 'undefined' || !Array.isArray(Renderer_Panel.action_timers[element_id])) {\n      Renderer_Panel.action_timers[element_id] = []\n    }\n\n    Renderer_Panel.action_timers[element_id].push(\n      setTimeout(\n        function () {\n          callback.call(this, panel_element, state)\n        }, \n        state.options.panel.slide_animation_duration\n      )\n    )\n    \n  }\n\n  /**\n   * Applies a pre-saved height for this panel, if it's stored on the element. Otherwise calculate the height\n   * and apply it. \n   * @param {HTMLElement} panel_element The element to act on\n   * @param {InstanceState} state The state object for this instance of the library   \n   */\n  public static applyCalculatedHeight(panel_element : HTMLElement, state :InstanceState, options? : any): string | number {\n\n    let height : string | number\n  \n    options = options || {}\n  \n    if ((typeof(options.ignore_stored) == 'undefined' || options.ignore_stored == false) && panel_element.hasAttribute(DATA_ATTR_PANEL_HEIGHT)) {\n        height = panel_element.getAttribute(DATA_ATTR_PANEL_HEIGHT)\n    }\n    else {\n      height = Renderer_Panel.calculateHeight(panel_element, state)\n    }\n  \n    if ( height !== null ) {\n      panel_element.style.height = height.toString() + 'px'\n    }\n  \n    return height\n  }\n\n  public static calculateHeight(panel_element: HTMLElement, state: InstanceState): number {\n    return panel_element.scrollHeight\n  }\n  \n  public static activateDefault(state : InstanceState) {\n    let panel_auto_activated = false\n\n    /*\n     * If the options tell us to automatically traverse to the active menu item \n     * (as determined by a class name or by examing the URL), do that here.\n     */\n    if ( state.options.init.auto_traverse_to_active ) {\n      const active_menu_panel = Renderer_MenuItem.panelElementByActiveMenuItem(state)\n      if (active_menu_panel) {\n        Renderer_Panel.activate(active_menu_panel, state, {'show_immediate': true})\n        panel_auto_activated = true\n      } \n    }\n\n    if ( !panel_auto_activated ) {\n      //\n      // activate first panel\n      //\n      const panels_container = Renderer_PanelsContainer.getContainerElement(state)\n\n      if (panels_container) {\n        const topmost_panel = panels_container.querySelector(state.options.selectors.panel)\n        if ( topmost_panel ) {\n          Renderer_Panel.activate(topmost_panel as HTMLElement, state, {'show_immediate': true})\n        }\n      }\n\n    }    \n  }\n\n  /**\n   * Activate (show) the given panel element\n   * @param {HTMLElement} panel_element the panel element to show as active\n   * @param {InstanceState} state The state for this instance of the library \n   * @param {Options_Panel_Activate} [options] { show_immediate, focus_first_item } \n   */\n  public static activate(panel_element: HTMLElement, state: InstanceState, options?: Options_Panel_Activate) {\n\n    options = options || {}\n  \n    const show_immediate =  ( typeof(options.show_immediate) !== 'undefined' && options.show_immediate ) ? true : false\n    const focus_timeout = ( show_immediate ) ? 0 : state.options.panel.slide_animation_duration\n    const focus_enabled = ( typeof(options.focus_first_item) !== 'undefined' && options.focus_first_item ) ? true : false\n    const panel_container = Renderer_PanelsContainer.getContainerElement(state)\n  \n    Renderer_Panel.removeActionTimer(panel_element, state)\n\n    if ( !Renderer_Panel.panelIsActive(panel_element, state) ) {\n\n      const active_panel = Renderer_Panel.panelGetActive(state)\n      let moving_up = false\n\n      if (active_panel) {\n        const active_panel_depth = active_panel.getAttribute(DATA_ATTR_PANEL_DEPTH)\n        const new_panel_depth = panel_element.getAttribute(DATA_ATTR_PANEL_DEPTH)\n        moving_up = (active_panel_depth > new_panel_depth) ? true : false\n      }\n\n      if ( show_immediate ) {\n        const all_panels = panel_container.querySelectorAll(state.options.selectors.panel)\n        for( let j = 0; j < all_panels.length; j++ ) {\n          all_panels[j].classList.add(state.options.classes.panel_show_immediate)\n        }\n      }\n\n\n      Renderer_Panel.panelsResetActive(state)\n      Renderer_Panel.activeAttributesApply(panel_element, state)\n      Renderer_ActiveTrail.recalculate(state)\n  \n      /**\n       * To make the transition more elegant, we set the height at a different timee\n       * depending on if the user is moving up in the menu or down. This way, when moving up,\n       * we don'risk cutting off the bottom of the lower menu before it slides out of view.\n       */\n       if (state.options.panel.height_auto) {\n        Renderer_Panel.activeHeightApply(state)\n        \n\n        if (show_immediate) {\n         Renderer_Panel.resetInactiveChildHeights(state)\n         Renderer_Panel.resetInactiveParentHeights(state)\n        }\n        else {\n\n          if (moving_up) {\n            Renderer_Panel.resetInactiveParentHeights(state)\n            Renderer_Panel.applyActionTimer(\n              panel_element, \n              function(panel_element: HTMLElement, state: InstanceState) {\n                if (state.options.panel.height_auto) {\n                  Renderer_Panel.resetInactiveChildHeights(state)\n                }\n              }, \n              state\n            )\n          }\n          else {\n            Renderer_Panel.applyActionTimer(\n              panel_element, \n              function(panel_element: HTMLElement, state: InstanceState) {\n                if (state.options.panel.height_auto) {\n                  Renderer_Panel.resetInactiveParentHeights(state)\n                  Renderer_Panel.resetInactiveChildHeights(state)\n                }\n              }, \n              state\n            )            \n          }\n\n          \n        }\n      }\n\n\n      if (state.options.panel.auto_scroll_to_top) {\n        if ( panel_container ) {\n          panel_container.scrollTop = 0\n        }\n  \n        panel_element.scrollTop = 0\n      }\n  \n      if (focus_enabled) {\n        window.setTimeout(\n          function() {\n            if( state.options.accessibility.menu_item_link_focus_first) {\n              const first_menu_link = panel_element.querySelector(state.options.selectors.menu_item_link) as HTMLElement\n              if ( first_menu_link ) {\n                first_menu_link.focus()\n              }\n            }\n          },\n          focus_timeout\n        )\n      }\n  \n      if ( show_immediate ) {\n        const immediate_panels = panel_container.querySelectorAll(`.${state.options.classes.panel_show_immediate}`)\n  \n        for( let i = 0; i < immediate_panels.length; i++ ) {\n          immediate_panels[i].classList.remove(state.options.classes.panel_show_immediate)\n        }\n      }\n  \n    }\n  \n  }\n\n  public static panelIsActive(panel_element: HTMLElement, state: InstanceState ) {\n    return panel_element.classList.contains(state.options.classes.panel_active)\n  }\n\n  public static panelGetActive( state: InstanceState ) {\n\n    const container = state.panels_container\n    let panel_elements: NodeList\n\n    const container_element = Renderer.findElementByID(container.id)\n    \n    return container_element.querySelector('.' + state.options.classes.panel_active)\n  }\n\n  public static panelsResetActive(state : InstanceState) {\n\n    const container = state.panels_container\n    const container_element = Renderer.findElementByID(container.id)\n    let panel_elements : NodeList\n\n    if ( container_element ) {\n      const panel_elements = container_element.querySelectorAll('.' + state.options.classes.panel_active)\n\n      panel_elements.forEach(\n        panel => {\n          Renderer_Panel.activeAttributesRemove(panel as HTMLElement, state)\n        }\n      )\n    }\n  }\n\n  public static activeHeightApply(state : InstanceState) {\n    const active_panel = Renderer_Panel.panelGetActive(state)\n\n    if ( active_panel ) {\n      Renderer_Panel.applyCalculatedHeight(active_panel as HTMLElement, state)\n      active_panel.classList.add(state.options.classes.panel_height_auto_applied)\n    }    \n\n  }\n\n  public static resetInactiveParentHeights(state : InstanceState) {\n    const active_panel = Renderer_Panel.panelGetActive(state)\n    let parent_panel: HTMLElement\n    let new_height: number | string\n\n    if ( active_panel ) {\n      new_height = active_panel.getAttribute(DATA_ATTR_PANEL_HEIGHT)\n      parent_panel  = Renderer_Panel.panelGetParent(active_panel, state)\n  \n      while (parent_panel) {\n        parent_panel.style.height = new_height.toString() + 'px'\n        parent_panel.classList.add(state.options.classes.panel_height_auto_applied)\n        parent_panel = Renderer_Panel.panelGetParent(parent_panel, state)\n      }\n  \n      if ( state.options.panels_container.height_auto) {        \n        Renderer_PanelsContainer.resize( state )\n      }\n  \n    }    \n\n  }\n\n  public static resetInactiveChildHeights(state : InstanceState) {\n    const active_panel = Renderer_Panel.panelGetActive(state)\n\n    if ( active_panel ) {\n      const sub_panels = active_panel.querySelectorAll(state.options.selectors.panel)\n      \n      if (sub_panels.length > 0) {\n        sub_panels.forEach(\n          (sub_panel) => {\n            const sub_panel_element = sub_panel as HTMLElement\n            sub_panel_element.style.height = \"0px\"\n          }\n        )\n      }\n  \n      if ( state.options.panels_container.height_auto) {        \n        Renderer_PanelsContainer.resize( state )\n      }\n  \n    }    \n\n  }\n\n\n  public static panelGetParent( panel_element : Element, state : InstanceState ): HTMLElement {\n    return nearestAncestor(panel_element, state.options.selectors.panel)\n  }\n\n}","const nearestAncestor = function(element: Element | Node, selector : string) : HTMLElement | null {\n\n  if ( typeof(element.parentElement) != 'undefined' ) {\n\n    let parent = element.parentElement\n\n    if ( parent ) {\n      if ( element instanceof Element ) {\n          //\n          // closest will return the current element if it maches,\n          // which is why we can call it on the immediate parent.\n          //\n          return parent.closest(selector)\n      }\n      else {\n        while( parent ) {\n          if ( parent.matches(selector) ) {\n              return parent\n          }\n\n          parent = parent.parentElement\n\n        }\n      }\n    }\n  }\n\n  return null\n}\n\nexport default nearestAncestor","import InstanceState from \"../state/InstanceState\"\nimport PanelsContainer from \"../components/PanelsContainer\"\nimport Renderer_Panel from \"./Renderer_Panel\"\nimport { Renderer } from \"./Renderer\"\nimport { DATA_ATTR_ELEMENT_ID, DATA_ATTR_PANEL_HEIGHT } from '../constants/constants'\n\nexport default class Renderer_PanelsContainer {\n\n  public static applyAttributes(container_element: HTMLElement, panel_container : PanelsContainer, state: InstanceState) {\n    container_element.setAttribute(DATA_ATTR_ELEMENT_ID, panel_container.id)\n    container_element.classList.add(state.options.classes.panels_container)\n  }\n\n  public static render(panel_container: PanelsContainer, state : InstanceState) : HTMLElement {\n  \n    const container_element = document.createElement('div')\n\n    Renderer_PanelsContainer.applyAttributes(container_element, panel_container, state)\n\n    if (panel_container.panels.length > 0) {\n      const panel_element = Renderer_Panel.render(panel_container.panels[0], state)\n      container_element.appendChild(panel_element)\n    }\n\n    container_element.classList.add(state.options.classes.panels_initialized)\n\n    return container_element\n  }\n\n  public static getContainerElement( state : InstanceState ) : HTMLElement | null {\n\n    if (state.panels_container && state.panels_container.id) {\n      return Renderer.findElementByID( state.panels_container.id )\n    }\n\n    return null\n    \n  }\n\n  public static getPanels(state: InstanceState): NodeList | null {\n\n    const element = Renderer_PanelsContainer.getContainerElement(state)\n\n    if (element) {\n      return element.querySelectorAll(state.options.selectors.panel)\n    }      \n\n    return null\n  }\n\n  /**\n   * Store the calculated height of all panels. This is useful so we don't have to constantly recalculate\n   * We only recalculate if the window is resized. \n   * @param {InstanceState} state The state for the current instance of the library \n   */\n  public static panelsHeightStore = function(state: InstanceState): void {\n\n    const container_element : Element = Renderer_PanelsContainer.getContainerElement(state)\n    const panels = container_element.querySelectorAll(state.options.selectors.panel)\n    let height = 0\n  \n    if (panels !== null) {\n  \n      for (let i = 0; i < panels.length; i++) {\n        height = Renderer_Panel.calculateHeight(panels[i] as HTMLElement, state)\n        panels[i].setAttribute(DATA_ATTR_PANEL_HEIGHT, height.toString())\n      }\n  \n    }\n  }\n\n  /**\n   * Recalculte and apply new height to the panels container\n   * @param {InstanceState} state The state for the current instance of the library \n   */\n  public static resize(state: InstanceState): number {\n\n    const container_element : HTMLElement = Renderer.findElementByID(state.panels_container.id)\n    const active_panel_element = Renderer_Panel.panelGetActive(state)\n    let height = -1\n  \n    if (container_element && active_panel_element) {\n      height = Renderer_Panel.calculateHeight(active_panel_element as HTMLElement, state)\n  \n      if ( height !== -1 ) {\n        container_element.style.height = height.toString() + 'px'\n      }\n  \n      container_element.classList.add(state.options.classes.panels_container_height_auto_applied)\n    }\n  \n    return height\n  }\n  \n}","import { TraversableMenu } from \"../core/traversable-core\"\nimport { DATA_ATTR_ELEMENT_ID } from '../constants/constants'\nimport Renderer_PanelsContainer from \"./Renderer_PanelsContainer\"\n\nexport class Renderer {\n\n  public static findElementByID(id : string): HTMLElement {\n      return document.querySelector(`[${DATA_ATTR_ELEMENT_ID}=\"` + id.toString() + '\"]')\n  }\n\n  public static render(instance : TraversableMenu) {\n    return Renderer_PanelsContainer.render(instance.state.panels_container, instance.state)\n  }\n\n  /**\n   * Calculate the height of an element based solely on its direct child elements\n   * This is no longer in use as of v2.0 but leaving it here in case we do need it later.\n   * @param {HTMLElement} element the element to calculate the height of\n   * @returns {number} The height of the element\n   */  \n  /*\n  public static heightCalculateBasedOnImmediateChildren (element: Element): number {\n\n    let height = null\n  \n    if ( element ) {\n  \n      const children = Renderer.immediateChildren(element as HTMLElement)\n      let scroll_height: number\n      let child: Element\n      \n      height = 0\n  \n      for( let i = 0; i < children.length; i++ ) {\n  \n        child = children[i] as Element\n\n        console.log('child element', child)\n\n        scroll_height = child.scrollHeight\n  \n        if ( !scroll_height ) {\n          //\n          // Inline elements won't have scroll height - in this instance, default to getBoundingClientRect()\n          //\n          const bounding_box = child.getBoundingClientRect()\n  \n          if ( bounding_box && typeof(bounding_box.height) != 'undefined' ) {\n            height += bounding_box.height\n          }\n        }\n        else {\n          height += scroll_height\n        }\n  \n        const child_style = window.getComputedStyle(child)\n  \n        if ( child_style ) {\n          height += ( child_style.marginTop != '' ) ? parseInt(child_style.marginTop) : 0 //height doesn't include margins\n          height += ( child_style.marginBottom != '' ) ? parseInt(child_style.marginBottom) : 0\n\n          height += ( child_style.marginBlockStart != '' ) ? parseInt(child_style.marginBlockStart) : 0 \n          height += ( child_style.marginBlockEnd != '' ) ? parseInt(child_style.marginBlockEnd) : 0          \n          \n          if ( scroll_height ) {\n            //\n            // scroll height doesn't account for borders\n            // @TODO: Neither does getBoundingClientRect() in a box model other than border-box\n            //\n            height += ( child_style.borderTopWidth != '' ) ? parseInt(child_style.borderTopWidth) : 0\n            height += ( child_style.borderBottomWidth != '' ) ? parseInt(child_style.borderBottomWidth) : 0\n          }\n        }\n      }\n  \n    }\n  \n    return height\n  \n  }\n  */\n\n  /**\n   * Returns only the immediate children of an element; it will not traverse into\n   * children of children even if they match the selector\n   * @param {HTMLElement} container the element to find immediate children of\n   * @param {string} [selector] optional selector to filter results by \n   * @returns {NodeList} matching nodes\n   */\n  public static immediateChildren(container : HTMLElement, selector?: string): NodeList {\n\n    const container_context = ( container.parentElement ) ? container.parentElement : document\n    let random_id : string\n\n    if ( !container.getAttribute('id') ) {\n      random_id = 'elem_id_' + (Math.floor(Math.random()*90000) + 10000).toString()\n      container.setAttribute('id', random_id)\n    }\n    \n    /*\n     * Currently can't do direct child selectors like '>.sub-item'; prepending the element ID is a workaround.\n    */\n    let full_selector = '#' + container.getAttribute('id') + '>'\n    full_selector += (selector) ? selector : '*'\n\n    const children = container_context.querySelectorAll( full_selector )\n\n    if ( random_id ) {\n      container.removeAttribute('id')\n    }\n\n    return children\n    \n  }\n\n}\n","import InstanceState from \"../state/InstanceState\"\nimport Renderer_PanelsContainer from \"../renderer/Renderer_PanelsContainer\"\nimport Renderer_Panel from \"../renderer/Renderer_Panel\"\n\nexport default class EventHandlers_Global {\n\n  public static apply(state: InstanceState) {\n\n    window.addEventListener('resize', \n      () => {\n        \n        if (state.options.panel.height_auto) {\n          Renderer_PanelsContainer.panelsHeightStore(state)\n        }\n\n        if (state.options.panels_container.height_auto) {\n          Renderer_PanelsContainer.resize(state)\n        }\n\n        if (state.options.panel.height_auto) {\n          Renderer_Panel.activeHeightApply(state)\n          Renderer_Panel.resetInactiveParentHeights(state)\n        }\n      }\n    )\n\n  }\n}","import InstanceState from \"../state/InstanceState\"\nimport Panel from \"../components/Panel\"\nimport { Renderer } from \"../renderer/Renderer\"\nimport { DATA_ATTR_ELEMENT_ID, DATA_ATTR_TRIGGER_TARGET } from '../constants/constants'\nimport { Trigger } from \"../components/Trigger\"\nimport Renderer_Panel from \"../renderer/Renderer_Panel\"\n\nexport default class EventHandlers_Trigger {\n\n  /**\n   * Given an event, determines whether the panel activation should fire. \n   * The events that trigger an activation are configurable as options.triggers.events\n   * @param event \n   * @param state \n   * @returns \n   */\n  public static eventShouldFire(event: Event, state: InstanceState): boolean {\n\n    const relevant_event_types = state.options.triggers.events\n\n    if (relevant_event_types.indexOf(event.type) > -1) {\n      if (event.type == 'keyup') {\n\n        const kb_event = event as KeyboardEvent\n\n        if (typeof(kb_event.code) !== 'undefined' && kb_event.key == 'Enter') {\n          return true\n        }\n      }\n      else {\n        if (event.type == 'mouseup') {\n          return true\n        }\n      }\n    }\n\n    return false\n    \n  }    \n\n  public static apply(element: Element, state: InstanceState): void {\n\n    let callback = state.options.callbacks.trigger.on\n\n    if (callback == null) {\n      callback = EventHandlers_Trigger.eventHandler\n    }\n\n    let cur_event_name : string\n    const events = ['keyup', 'mouseup', 'click']\n\n    events.forEach(\n      cur_event_name => {\n        element.addEventListener(cur_event_name, \n          function (event: Event) {\n            callback.call(this, event, state)\n          }, \n          { capture: false }\n        )\n      }\n    )\n\n  }\n\n  public static eventHandler(event: Event, state: InstanceState): boolean {\n\n    let callback: (event: Event, state: InstanceState) => boolean\n    const callback_params = { event: event, state: state }\n\n    event.preventDefault()\n\n    if ( EventHandlers_Trigger.eventShouldFire(event, state) ) {\n      if ( callback = state.options.callbacks.trigger.before ) {\n        callback.call(this, callback_params)\n      }\n    }\n\n    let last_event = \"\"\n    let trigger_target_id : string\n    let trigger_element = this as any\n    trigger_element = trigger_element as HTMLElement\n\n    if ( trigger_target_id = trigger_element.getAttribute(DATA_ATTR_TRIGGER_TARGET) ) {\n      const panel_element_to_activate: HTMLElement = Renderer.findElementByID(trigger_target_id)\n\n      if ( panel_element_to_activate ) {\n        //\n        // for ADA compliance, we want to check to see if someone pressed enter as opposed to clicking on the link with a mouse\n        // If they're using a keyboard to navigate, focus the first menu item of the newly activated panel. Otherwise, don't\n        //\n        if ( event.type == 'keyup' ) {\n\n          const kb_event = event as KeyboardEvent\n          event.preventDefault()\n\n          if ( typeof(kb_event.code) !== 'undefined' && kb_event.code == 'Enter' ) {\n            last_event = 'keyup'\n            Renderer_Panel.activate(panel_element_to_activate, state, { focus_first_item: true })\n          }\n          return false\n        }\n        else if (event.type == 'mouseup') {\n\n          console.log('mousing up')\n\n          event.preventDefault()\n\n          if (panel_element_to_activate.getAttribute('data-last-activation-event') != 'touchend') { //panel was already activated by touch\n            last_event = 'mouseup'\n            Renderer_Panel.activate(panel_element_to_activate, state)\n          }\n\n        }\n        else if (event.type == 'click') {\n          //\n          // Mouseup will handle everything without screwing around with touch events, so we basically disable click\n          //\n          event.preventDefault()\n        }\n      }\n\n      panel_element_to_activate.setAttribute('data-last-activation-event', last_event)\n    }\n\n    if ( EventHandlers_Trigger.eventShouldFire(event, state) ) {\n      if ( callback = state.options.callbacks.trigger.after ) {\n        callback.call(this, callback_params)\n      }\n    }\n\n    return false //Always return false to further ensure preventing of default behavior\n\n  }\n  \n}","\nimport InstanceState from \"../state/InstanceState\"\nimport MenuItem from \"../components/MenuItem\"\nimport EventHandlers_Trigger from \"./EventHandlers_Trigger\"\nimport EventHandlers_Panel from \"./EventHandlers_Panel\"\nimport { Renderer } from \"../renderer/Renderer\"\n\nexport default class EventHandlers_MenuItem {\n\n  public static apply(menu_item: MenuItem, state: InstanceState) {\n\n    if (menu_item.trigger_child) {\n      const trigger_element = Renderer.findElementByID(menu_item.trigger_child.id)\n      if (trigger_element) {\n        EventHandlers_Trigger.apply(trigger_element, state)\n      }\n    }\n\n    if (menu_item.sub_panel) {\n      EventHandlers_Panel.apply(menu_item.sub_panel, state)\n    }\n  }\n}","import InstanceState from \"../state/InstanceState\"\nimport Panel from \"../components/Panel\"\nimport EventHandlers_Trigger from \"./EventHandlers_Trigger\"\nimport EventHandlers_MenuItem from \"./EventHandlers_MenuItem\"\nimport { Renderer } from \"../renderer/Renderer\"\n\nexport default class EventHandlers_Panel {\n\n  public static apply(panel: Panel, state: InstanceState) {\n\n    if (panel.trigger_parent) {\n      const parent_trigger_element = Renderer.findElementByID(panel.trigger_parent.id)\n      if ( parent_trigger_element ) {\n        EventHandlers_Trigger.apply(parent_trigger_element, state)\n      }\n    }\n\n    if (panel.trigger_top) {\n      const top_trigger_element = Renderer.findElementByID(panel.trigger_top.id)\n      if ( top_trigger_element ) {\n        EventHandlers_Trigger.apply(top_trigger_element, state)\n      }\n    }\n\n    panel.menu_items.forEach(\n      menu_item => {\n        EventHandlers_MenuItem.apply(menu_item, state)\n      }\n    )\n  }\n}\n","import InstanceState from \"../state/InstanceState\"\nimport EventHandlers_Panel from \"./EventHandlers_Panel\"\n\nexport default class EventHandlers_PanelsContainer {\n\n  public static apply(state: InstanceState) {\n\n    const panel_container = state.panels_container\n    \n    EventHandlers_Panel.apply(panel_container.panels[0], state)\n  }\n}","import InstanceState from \"../state/InstanceState\"\nimport EventHandlers_Global from \"./EventHandlers_Global\"\nimport EventHandlers_PanelsContainer from \"./EventHandlers.PanelsContainer\"\n\nexport default class EventHandlers {\n\n  public static apply(state: InstanceState) {\n    EventHandlers_Global.apply(state)\n    EventHandlers_PanelsContainer.apply(state)\n  }\n}","import InstanceState from \"../state/InstanceState\"\nimport MenuItem from \"../components/MenuItem\"\nimport MenuItemLink from \"../components/MenuItemLink\"\nimport Renderer_MenuItemLink from \"../renderer/Renderer_MenuItemLink\"\nexport default class Parser_MenuItem {\n\n  public static parse(link_element: HTMLElement, menu_item: MenuItem, state: InstanceState) {\n\n    const menu_item_link = new MenuItemLink(state)\n    menu_item_link.menu_item = menu_item\n    menu_item_link.text = link_element.innerHTML\n    menu_item_link.link = link_element.getAttribute('href')\n\n    menu_item.link = menu_item_link\n\n    Renderer_MenuItemLink.applyAttributes(link_element, menu_item_link, state)\n\n  }\n}","import { Trigger } from \"../components/Trigger\"\nimport Renderer_Trigger from \"../renderer/Renderer_Trigger\"\nimport InstanceState from \"../state/InstanceState\"\n\nexport default class Parser_Trigger {\n\n  public static parse(trigger_element: HTMLElement, trigger: Trigger, state: InstanceState) {\n\n    Renderer_Trigger.applyAttributes(trigger, trigger_element, state)\n\n  }\n}","import InstanceState from \"../state/InstanceState\"\nimport MenuItem from \"../components/MenuItem\"\nimport Renderer_MenuItem from \"../renderer/Renderer_MenuItem\"\nimport Panel from \"../components/Panel\"\nimport Parser_MenuItemLink from \"./Parser_MenuItemLink\"\nimport Parser_Panel from \"./Parser_Panel\"\nimport { Trigger_Child } from \"../components/Trigger\"\nimport Parser_Trigger from \"./Parser_Trigger\"\nimport { Trigger, Trigger_Parent } from \"../components/Trigger\"\n\nexport default class Parser_MenuItem {\n\n  public static parse(menu_item_element: HTMLElement, panel: Panel, state: InstanceState) {\n\n    const menu_item = new MenuItem(state)\n    menu_item.element = menu_item_element\n    menu_item.panel = panel\n    \n    panel.addMenuItem(menu_item)\n\n    Renderer_MenuItem.applyAttributes(menu_item.element, menu_item, state)\n\n    const link_element = menu_item.element.querySelector(state.options.selectors.menu_item_link)\n\n    if (link_element) {\n      Parser_MenuItemLink.parse(link_element as HTMLElement, menu_item, state)\n    }\n\n    const sub_panel_element = menu_item.element.querySelector(state.options.selectors.panel)\n\n    if (sub_panel_element) {\n\n      const sub_panel = new Panel(state.panels_container, state)\n      sub_panel.parent = panel\n      sub_panel.menu_item_parent = menu_item\n      sub_panel.element = sub_panel_element\n      sub_panel.depth = panel.depth + 1\n\n      menu_item.sub_panel = sub_panel\n\n      /*\n       * Identify and parse child & parent triggers\n       */\n      Parser_MenuItem.parseTriggerChild(menu_item, state)\n      Parser_MenuItem.parseTriggerParent(menu_item, state)\n\n      /*\n      const trigger_for_child_element = menu_item.element.querySelector(state.options.selectors.panel_trigger_child)\n\n      if (trigger_for_child_element) {\n        const trigger_for_child = new Trigger_Child(state)\n        trigger_for_child.panel = panel\n        trigger_for_child.activates_panel = sub_panel\n        trigger_for_child.element = trigger_for_child_element\n        trigger_for_child.menu_item = menu_item\n\n        menu_item.trigger_child = trigger_for_child\n\n        Parser_Trigger.parse(trigger_for_child_element as HTMLElement, trigger_for_child, state)\n      }\n\n      const parent_trigger_element = sub_panel.element.querySelector(state.options.selectors.panel_trigger_parent)\n\n      if (parent_trigger_element) {\n        const parent_trigger = new Trigger_Parent(state)\n        parent_trigger.element = parent_trigger_element\n        parent_trigger.panel = sub_panel\n        parent_trigger.activates_panel = sub_panel.parent\n        parent_trigger.menu_item = menu_item\n        sub_panel.trigger_parent = parent_trigger\n        \n        Parser_Trigger.parse(parent_trigger_element as HTMLElement, parent_trigger, state)\n        \n      }\n      */\n      \n      Parser_Panel.parse(sub_panel, state)\n\n    }\n  }\n\n  public static parseTriggerChild(menu_item: MenuItem, state: InstanceState) {\n\n    const trigger_for_child_element = menu_item.element.querySelector(state.options.selectors.panel_trigger_child)\n\n    if (menu_item.sub_panel && trigger_for_child_element) {\n      const trigger_for_child = new Trigger_Child(state)\n      trigger_for_child.panel = menu_item.panel\n      trigger_for_child.activates_panel = menu_item.sub_panel\n      trigger_for_child.element = trigger_for_child_element\n      trigger_for_child.menu_item = menu_item\n\n      menu_item.trigger_child = trigger_for_child\n\n      Parser_Trigger.parse(trigger_for_child_element as HTMLElement, trigger_for_child, state)\n    }\n\n  }\n\n  public static parseTriggerParent(menu_item: MenuItem, state: InstanceState) {\n\n    if (menu_item.sub_panel) {\n      const parent_trigger_element = menu_item.sub_panel.element.querySelector(state.options.selectors.panel_trigger_parent)\n\n      if (parent_trigger_element) {\n        const parent_trigger = new Trigger_Parent(state)\n        parent_trigger.element = parent_trigger_element\n        parent_trigger.panel = menu_item.sub_panel\n        parent_trigger.activates_panel = menu_item.sub_panel.parent\n        parent_trigger.menu_item = menu_item\n        menu_item.sub_panel.trigger_parent = parent_trigger\n        \n        Parser_Trigger.parse(parent_trigger_element as HTMLElement, parent_trigger, state)\n        \n      }\n    }\n  }  \n}","import InstanceState from \"../state/InstanceState\"\nimport Panel from \"../components/Panel\"\nimport Renderer_Panel from \"../renderer/Renderer_Panel\"\nimport Parser_MenuItem from \"./Parser_MenuItem\"\nimport { Renderer } from \"../renderer/Renderer\"\nimport { Trigger_Top } from \"../components/Trigger\"\nimport Renderer_Trigger from \"../renderer/Renderer_Trigger\"\nimport Renderer_PanelTitle from \"../renderer/Renderer_PanelTitle\"\n\nexport default class Parser_Panel {\n\n  /**\n   * Reads existing HTML for a panel element and creates relevant object hierarchy from it\n   * @param {Panel} panel The panel to parse. panel.element must be set.\n   * @param {InstanceState} state State object for this instance\n   */\n  public static parse(panel: Panel, state: InstanceState): void {\n\n    Renderer_Panel.applyAttributes(panel.element as HTMLElement, panel, state)\n    Parser_Panel.parsePanelTitle(panel, state)\n    Parser_Panel.initializeTopTrigger(panel, state)\n    Parser_Panel.parsePanelMenuItems(panel, state)\n  }\n\n  /**\n   * Iterate through each menu item in the panel and parse it individually.\n   * @param {Panel} panel The panel to parse. panel.element must be set.\n   * @param {InstanceState} state State object for this instance\n   */\n  public static parsePanelMenuItems(panel: Panel, state: InstanceState) {\n\n    const menu_item_elements = Parser_Panel.findImmediateMenuItems(panel, state)\n\n    if (menu_item_elements) {\n      menu_item_elements.forEach(\n        menu_item_element => {\n          Parser_MenuItem.parse(menu_item_element as HTMLElement, panel, state)\n        }\n      )\n    }\n\n  }\n\n  /**\n   * Find menu item elements in the HTML for this panel only (not sub-panels)\n   * \n   * @param {Panel} panel the panel object to find menu items for\n   * @param {InstanceState} State object for this instance\n   * @returns {NodeList}\n   */\n  public static findImmediateMenuItems(panel: Panel, state: InstanceState): NodeList {\n\n    /*\n     * @TODO: would like to do something better here than just assume a ul, \n     * but we can't just use querySelectorAll or we'll get all LIs within this panel and subpanels.\n    */\n    let menu_item_elements: NodeList\n    const ul = panel.element.querySelector('ul')\n\n    if ( ul ) {\n      menu_item_elements = Renderer.immediateChildren(ul as HTMLElement, state.options.selectors.menu_item)\n    }\n\n    return menu_item_elements\n  }\n\n  /**\n   * If we found a \"top trigger\" (usually \"Up to Main Menu\"),\n   * initialize an object for it, then apply appropriate attributes to the HTML element\n   * \n   * @param {Panel} panel The panel to find a title for\n   * @param {InstanceState} state State object for this instance\n   */ \n  public static initializeTopTrigger(panel: Panel, state: InstanceState): void {\n\n    const top_trigger_element = panel.element.querySelector(state.options.selectors.panel_trigger_top)\n\n    if (top_trigger_element) {\n      \n      const trigger = new Trigger_Top(state)\n      trigger.panel = panel\n      trigger.element = top_trigger_element\n      trigger.activates_panel = state.panels_container.panels[0]\n      panel.trigger_top = trigger\n\n      Renderer_Trigger.applyAttributes(trigger, top_trigger_element as HTMLElement, state)\n    }\n  }\n\n  /**\n   * If we found a title element, extract the text and apply it to the panel.\n   * \n   * @param {Panel} panel The panel to find a title for\n   * @param {InstanceState} state State object for this instance\n   */ \n  public static parsePanelTitle(panel: Panel, state: InstanceState): void {\n    \n    const title_element = panel.element.querySelector(state.options.selectors.panel_title) as HTMLElement\n\n    if (title_element) {\n      Renderer_PanelTitle.applyText(title_element, panel, state)\n      Renderer_PanelTitle.applyLinkAttributes(title_element, panel, state)\n      Renderer_PanelTitle.applyAttributes(title_element, state)\n    }\n  }\n\n}","import InstanceState from \"../state/InstanceState\"\nimport PanelsContainer from \"../components/PanelsContainer\"\nimport Parser_Panel from \"./Parser_Panel\"\nimport Renderer_PanelsContainer from \"../renderer/Renderer_PanelsContainer\"\nimport Panel from \"../components/Panel\"\n\nexport default class Parser_PanelsContainer {\n\n  /**\n   * Reads existing HTML for a panels container element and creates relevant object hierarchy from it.\n   * This method recurses into the panels themselves and parses those as well.\n   * @param {HTMLElement} panels_container_element the panels container HTML element\n   * @param state State object for this instance\n  */\n  public static parse(panels_container_element: HTMLElement, state: InstanceState): void {\n\n    const panels_container = new PanelsContainer(state)\n    panels_container.element = panels_container_element\n\n    state.panels_container = panels_container\n\n    Renderer_PanelsContainer.applyAttributes(panels_container.element, state.panels_container, state)\n\n    const panel_element = panels_container_element.querySelector(state.options.selectors.panel)\n\n    if ( panel_element ) {\n\n      const panel = new Panel(state.panels_container, state)\n\n      panel.element = panel_element\n      panel.depth = 0\n\n      state.panels_container.addPanel(panel)\n\n      Parser_Panel.parse(panel, state)\n    }\n\n  }\n}","/**\n * This class is used to parse an existing traversable-compatible menu structure into\n * the appropriate objects & structures. \n * It's used when the HTML for the menu is pre-prepared, rather than having menu items\n * passed as a JSON object. \n */\n\nimport InstanceState from \"../state/InstanceState\"\nimport Parser_PanelsContainer from \"./Parser_PanelsContainer\"\n\nexport default class Parser {\n\n  public static parse(panels_container_selector: string, state: InstanceState): void | boolean {\n\n    const panels_container = document.querySelector(panels_container_selector)\n\n    if (!panels_container) {\n      if (!state.options.errors.silent_if_no_container) {\n        console.error(`Could not find menu container. Selector was${panels_container_selector}`)\n      }\n      return false\n    }\n\n    Parser_PanelsContainer.parse(panels_container as HTMLElement, state)\n\n  }\n}\n","import PanelsContainer from '../components/PanelsContainer'\nimport InstanceState from '../state/InstanceState'\nimport { Renderer } from '../renderer/Renderer'\nimport Renderer_Panel from '../renderer/Renderer_Panel'\nimport Renderer_PanelsContainer from '../renderer/Renderer_PanelsContainer'\nimport { PanelContainerData } from '../types/ItemData'\nimport EventHandlers from '../event_handlers/EventHandlers'\nimport Parser from '../parser/Parser'\nimport { PartialOptions } from '../types/Options'\nimport merge from \"ts-deepmerge\"\n\nexport class TraversableMenu {\n\n  state: InstanceState\n\n  /**\n   * Constructor\n   * @param options Any of the available options; see documentation\n   */\n  constructor(options?: PartialOptions | undefined) {\n    this.state = new InstanceState(this)\n\n    if (options) {\n      this.optionsApply(options)\n    }\n\n    InstanceState.Instance_count++\n\n    this.state.panels_container = new PanelsContainer(this.state)\n\n  }\n\n  /**\n   * Combines given options with a full set of options and saves\n   * them in the instance state\n   * @param options Any of the available options; see documentation\n   */\n  public optionsApply(options: PartialOptions) {\n    this.state.options = merge(this.state.options, options)\n  }\n\n  /**\n   * Initializes a traversable menu from existing HTML markup (see example for details)\n   * @param {string} panels_container_selector the selector that holds the markup\n   */\n  public initializeFromHTML(panels_container_selector: string) {\n    Parser.parse(panels_container_selector, this.state)\n\n    if (this.state.options.panel.height_auto) {\n      Renderer_PanelsContainer.panelsHeightStore(this.state)\n    }\n    Renderer_Panel.activateDefault(this.state)\n    EventHandlers.apply(this.state)\n    \n  }\n\n  /**\n   * Initializes a traversable menu from JSON data (see example for details)\n   * @param {PanelContainerData} item_data nested item data\n   */\n  public initializeFromData(item_data: PanelContainerData) {\n    this.state.panels_container.initializeFromData(item_data)\n  }\n\n  render(): HTMLElement {\n    return Renderer.render(this)\n  }\n\n  renderInto(container: Element): void {\n\n    if (!container || typeof(container.appendChild) == 'undefined') {\n      throw new Error(\"Could not append to given container. Check that you passed a valid, existing DOM element to renderInto\")\n    }\n\n    const panels_container_element = this.render()\n    \n    container.appendChild(panels_container_element)\n\n    if (this.state.options.panel.height_auto) {\n      Renderer_PanelsContainer.panelsHeightStore(this.state)\n    }\n    \n    Renderer_Panel.activateDefault(this.state)\n    EventHandlers.apply(this.state)\n  }\n\n  debug(...args: any) {\n    if ( this.state.options.core.debug ) {\n      if ( args.length > 0 ) {\n        for ( let i = 0; i < args.length; i++ ) {\n          console.log( args[i] )\n        }\n      }\n    }\n  }\n\n}\n\n"],"names":["root","factory","exports","module","define","amd","a","i","self","__assign","this","Object","assign","t","s","n","arguments","length","p","prototype","hasOwnProperty","call","apply","__read","o","m","Symbol","iterator","r","e","ar","next","done","push","value","error","__spreadArray","to","from","pack","l","Array","slice","concat","defineProperty","isObject","obj","getPrototypeOf","toString","merge","objects","_i","reduce","result","current","isArray","TypeError","keys","forEach","key","includes","options","mergeArrays","Set","defaultOptions","withOptions","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","getter","__esModule","d","definition","enumerable","get","prop","toStringTag","DATA_ATTR_ELEMENT_ID","DATA_ATTR_TRIGGER_TARGET","DATA_ATTR_TRIGGER_SOURCE","DATA_ATTR_PANEL_HEIGHT","DATA_ATTR_ELEMENT_PARENT_ID","DATA_ATTR_PANEL_ID","DATA_ATTR_PANEL_DEPTH","state","elementIDGet","element","getAttribute","elementApply","id","ComponentIdentifier","newID","setAttribute","generateUniqueSerial","replace","Math","floor","random","container","_depth","menu_items","_id","addMenuItem","item","depth","_parent","parent","_panel","panel","given_string","token","val","_activates_panel","triggers","child_text","classes","panel_trigger_child","Trigger","text","top_depth","top_remove_auto","top_text","menu_item","menu_item_parent","menu_item_link","link","parent_text","panel_trigger_parent","panel_trigger_top","panels","validateItemData","item_data","initializeFromData","panelInitializeFromData","items","addPanel","menuItemInitializeFromData","trigger_parent","Trigger_Parent","activates_panel","sub_panel","trigger_child","Trigger_Child","panelsReset","selector","default_options","core","debug","init","auto_traverse_to_active","active","selectors","accessibility","panels_container","height_auto","callbacks","trigger","before","on","after","activate","initialize","classNameFromSelector","split","instance","depth_max_canonical","Instance_count","render","trigger_element","document","createElement","Renderer_Trigger","applyAttributes","panel_id","innerHTML","classList","add","classname","Trigger_Top","style","display","setActivated","activeItemSelectors","find_by_class","menu_item_active","menu_item_link_active","find_by_url","ActiveTrail","activeURLSelectors","selectors_additional","link_selectors","activeURLsGet","active_urls","urls","active_urls_explicit","activeURLsDefault","href_split","window","location","href","pathname_with_query_string","substr","indexOf","pathname","valid_urls","menu_link_element","Renderer_MenuItemLink","menu_item_element","Renderer_MenuItem","appendChild","activeMenuItemIdentify","matching_items","matching_element","active_selectors","final_match","panels_container_element","querySelectorAll","matches","parent_count","parents_search_max","this_node","parentElement","panelElementByActiveMenuItem","active_menu_item","panel_element","Renderer","findElementByID","panelInclude","panel_active_trail","trigger_source_id","trigger_for_panel","panel_parent_id","panel_parent_element","panel_child_open","scrollTop","Renderer_ActiveTrail","panelExclude","remove","panelGetActive","querySelector","panel_active","recalculate","active_panel","node","Renderer_PanelTitle","shouldShow","title_element","link_element","renderLink","applyText","title_first","panel_title_element","title_text","applyLinkAttributes","panel_title_link","depth_class","panel_depth","zindex_auto","zIndex","zindex_start","height","list_element","Renderer_Panel","top_trigger_enabled","top_trigger_element","renderTopTrigger","trigger_parent_element","trigger_top","activatePanelByID","activeAttributesApply","visibility","activeAttributesRemove","applyActionTimer","removeActionTimer","element_id","action_timers","timer","clearTimeout","callback","setTimeout","slide_animation_duration","applyCalculatedHeight","ignore_stored","hasAttribute","calculateHeight","scrollHeight","activateDefault","panel_auto_activated","active_menu_panel","topmost_panel","show_immediate","focus_timeout","focus_enabled","focus_first_item","panel_container","panelIsActive","moving_up","all_panels","j","panel_show_immediate","panelsResetActive","activeHeightApply","resetInactiveChildHeights","resetInactiveParentHeights","auto_scroll_to_top","menu_item_link_focus_first","first_menu_link","focus","immediate_panels","contains","container_element","panel_height_auto_applied","parent_panel","new_height","panelGetParent","sub_panels","Element","closest","Renderer_PanelsContainer","panels_initialized","getContainerElement","getPanels","resize","active_panel_element","panels_container_height_auto_applied","panelsHeightStore","immediateChildren","random_id","container_context","full_selector","children","removeAttribute","addEventListener","eventShouldFire","event","events","type","kb_event","EventHandlers_Trigger","eventHandler","cur_event_name","capture","callback_params","preventDefault","trigger_target_id","last_event","panel_element_to_activate","code","console","log","parent_trigger_element","parse","Parser_MenuItemLink","sub_panel_element","Parser_MenuItem","parseTriggerChild","parseTriggerParent","trigger_for_child_element","trigger_for_child","parent_trigger","Parser_Panel","parsePanelTitle","initializeTopTrigger","parsePanelMenuItems","menu_item_elements","findImmediateMenuItems","ul","panel_title","panels_container_selector","errors","silent_if_no_container","optionsApply","initializeFromHTML","renderInto","Error","args"],"sourceRoot":""}